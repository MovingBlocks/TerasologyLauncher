/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Documentation: http://gradle.org/documentation
 * - View tasks for this project: $ gradlew tasks
 */

apply plugin: 'java'
apply plugin: 'project-report'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'checkstyle'

/*
 * Update Gradle Wrapper:
 * 1. Uncomment 'wrapper' task
 * 2. Change 'gradleVersion'
 * 3. Run "gradlew wrapper"
 * 4. Comment 'wrapper' task
 */
//task wrapper(type: Wrapper) {
//    gradleVersion = '1.4'
//}

import org.apache.tools.ant.filters.FixCrLfFilter;
import java.text.SimpleDateFormat;

def dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
dateTimeFormat.timeZone = TimeZone.getTimeZone("UTC")

// Declare "extra properties" (variables) for the project - a Gradle thing that makes them special.
ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    // Stuff for our automatic version file setup
    startDateTimeString = dateTimeFormat.format(new Date())
    versionInfoFileDir = new File(sourceSets.main.output.resourcesDir, 'org/terasology/launcher/version')
    versionInfoFile = new File(versionInfoFileDir, 'versionInfo.properties')
    versionBase = rootProject.file("version.txt").text.trim()
    displayVersion = (env.JOB_NAME == 'TerasologyLauncherStable') ? versionBase : ((env.JOB_NAME != null && env.BUILD_NUMBER != null) ? versionBase + '.' + env.BUILD_NUMBER + '+' + env.JOB_NAME : versionBase + ' local development ' + startDateTimeString)

    // Splash image for the JAR
    splashImage = "org/terasology/launcher/images/splash.jpg"
}

// Declare remote repositories we're interested in - library files will be fetched from here
repositories {
    // Main Maven repo
    mavenCentral()
}

// Primary dependencies definition
dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'

    // These dependencies are only needed for running tests
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

// Set the expected module Java level (can use a higher Java to run, but should not use features from a higher Java)
sourceCompatibility = 1.7

mainClassName = "org.terasology.launcher.TerasologyLauncher"

checkstyle {
    ignoreFailures = true
    configProperties.samedir = checkstyle.configFile.parentFile
}

task createVersionInfoFile {
    inputs.property('dateTime', startDateTimeString)
    onlyIf { env.BUILD_URL != null }
    doLast {
        versionInfoFileDir.mkdirs()
        ant.propertyfile(file: versionInfoFile) {
            ant.entry(key: 'buildNumber', value: env.BUILD_NUMBER)
            ant.entry(key: 'buildId', value: env.BUILD_ID)
            ant.entry(key: 'buildTag', value: env.BUILD_TAG)
            ant.entry(key: 'buildUrl', value: env.BUILD_URL)
            ant.entry(key: 'jobName', value: env.JOB_NAME)
            ant.entry(key: 'gitBranch', value: env.GIT_BRANCH)
            ant.entry(key: 'gitCommit', value: env.GIT_COMMIT)
            ant.entry(key: 'dateTime', value: startDateTimeString)
            ant.entry(key: 'displayVersion', value: displayVersion)
        }
    }
}
createVersionInfoFile.dependsOn processResources
jar.dependsOn createVersionInfoFile
distZip.dependsOn createVersionInfoFile
distTar.dependsOn createVersionInfoFile

jar {
    // replace development "logback.xml" with productive "logback_jar.xml"
    exclude "logback.xml"
    rename('logback_jar.xml', 'logback.xml')
    manifest {
        def manifestClasspath = configurations.runtime.collect { it.getName() }.join(" ")
        attributes("Main-Class": mainClassName, "Class-Path": manifestClasspath,
                "Implementation-Title": project.name, "Implementation-Version": displayVersion,
                "SplashScreen-Image": splashImage)
    }
}

applicationDistribution.from('README.md')

applicationDistribution.from('README.md') {
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
    rename('README.md', 'README.txt')
}

applicationDistribution.from('CHANGELOG.md')

applicationDistribution.from('CHANGELOG.md') {
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
    rename('CHANGELOG.md', 'CHANGELOG.txt')
}

applicationDistribution.from('CONTRIBUTING.md')

applicationDistribution.from('CONTRIBUTING.md') {
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
    rename('CONTRIBUTING.md', 'CONTRIBUTING.txt')
}

applicationDistribution.from('LICENSE') {
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
}

applicationDistribution.from('NOTICE') {
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
}

applicationDistribution.from('src/template/VERSION.md') {
    expand(buildNumber: env.BUILD_NUMBER, buildUrl: env.BUILD_URL, gitBranch: env.GIT_BRANCH,
            dateTime: startDateTimeString, displayVersion: displayVersion)
}

applicationDistribution.from('src/template/VERSION.md') {
    expand(buildNumber: env.BUILD_NUMBER, buildUrl: env.BUILD_URL, gitBranch: env.GIT_BRANCH,
            dateTime: startDateTimeString, displayVersion: displayVersion)
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("crlf"))
    rename('VERSION.md', 'VERSION.txt')
}

// For IntelliJ add a bunch of excluded directories
idea {
    // Exclude Gradle dir
    module.excludeDirs += file('gradle')

    // Exclude Eclipse dirs
    module.excludeDirs += file('bin')
    module.excludeDirs += file('.settings')
}

// activate CheckStyle configuration with project specific rules
idea.project.ipr {
    withXml { xmlProvider ->
        def project = xmlProvider.asNode()
        activateCheckstyle(project)
    }
}

// change or add CheckStyle configuration
def activateCheckstyle(project) {
    def checkstyle = project.component.find { it.@name == 'CheckStyle-IDEA' }
    if (checkstyle) {
        //TODO: check and update/change existing configuration if necessary
    } else {
        // Create new CheckStyle component
        checkstyle = project.appendNode('component', [name: 'CheckStyle-IDEA'])
        // use NodeBuilder to create the config block in the xml structure
        def builder = new NodeBuilder()
        def option = builder.option(name: 'configuration') {
            map {
                entry(key: 'active-configuration',
                        value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/checkstyle/checkstyle.xml:TerasologyLauncher CheckStyle')
                entry(key: 'check-nonjava-files', value: false)
                entry(key: 'check-test-classes', value: true)
                entry(key: 'location-0',
                        value: 'CLASSPATH:/sun_checks.xml:The default CheckStyle rules')
                entry(key: 'location-1',
                        value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/checkstyle/checkstyle.xml:TerasologyLauncher CheckStyle')
                entry(key: 'property-1.samedir', value: 'config/checkstyle')
                entry(key: 'suppress-errors', value: false)
                entry(key: 'thirdparty-classpath', value: '')
            }
        }
        // Add result from NodeBuilder
        checkstyle.append option
    }
}
