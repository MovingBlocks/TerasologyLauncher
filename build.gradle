/*
 * Copyright 2019 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Documentation: http://gradle.org/documentation
 * - View tasks for this project: $ gradlew tasks
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.0.4"
    id 'de.undercouch.download' version '4.0.4'
    id 'java'
    // to help clarify conflicting logging providers
    id 'name.remal.component-metadata' version '1.0.186'
    id 'nebula.release' version '14.1.0'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'pmd'
    id 'project-report'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

apply plugin: 'org.terasology.gradlegoo'
apply from: "./config/gradle/jre.gradle"
apply from: "./config/gradle/swagger.gradle"

// Test for right version of Java in use for running this script
assert JavaVersion.current().isJava11Compatible()

import org.apache.tools.ant.filters.FixCrLfFilter

import java.text.SimpleDateFormat

def dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")
dateTimeFormat.timeZone = TimeZone.getTimeZone("UTC")

configurations {
    codeMetrics
}

// Declare "extra properties" (variables) for the project - a Gradle thing that makes them special.
ext {
    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()

    // Stuff for our automatic version file setup
    startDateTimeString = dateTimeFormat.format(new Date())

    // Splash image for the JAR
    splashImage = 'org/terasology/launcher/images/splash.jpg'

    // Shared code analytics configurations via retrieved config zip
    metricsConfigDir = 'config/metrics'
}

// Declare remote repositories we're interested in - library files will be fetched from here
repositories {
    // Main Maven repo
    mavenCentral()
    // MovingBlocks Artifactory instance(s) for libs not readily available elsewhere plus our own libs
    maven {
        allowInsecureProtocol true
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
    maven {
        // for spf4j dependencies that haven't been merged upstream
        // i.e. org.apache.avro:avro
        url  "https://dl.bintray.com/zolyfarkas/core"
    }
    jcenter()
    maven { url "https://jitpack.io" }
}

// Primary dependencies definition
dependencies {
    implementation group: 'net.java.dev.jna', name: 'jna', version: '4.1.0'
    implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '4.1.0'
    implementation group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation group: "com.google.guava", name: "guava", version: "28.1-jre"
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha5'
    implementation group: 'com.github.everit-org.json-schema', name: 'org.everit.json.schema', version: '1.12.1'

    implementation group: 'com.jcabi', name: 'jcabi-github', version: '1.0'
    // should only be used inside org.terasology.launcher.github
    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'

    implementation group: 'com.vdurmont', name: 'semver4j', version: '3.1.0'
    
    // For Web API
    // TODO: extract swagger dependencies into swagger.gradle
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.5'
    if (new File('web-api-client').exists()) {
        implementation project(':web-api-client')
    }

    // These dependencies are only needed for running tests
    testImplementation 'org.spf4j:spf4j-slf4j-test:8.8.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.26.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '2.26.0' // For final classes

    testImplementation 'org.powermock:powermock-module-junit4:2.0.4'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.2'

    // Config for our code analytics from: https://github.com/MovingBlocks/TeraConfig
    codeMetrics group: 'org.terasology.config', name: 'codemetrics', version: '1.4.0', ext: 'zip'
}

configurations.named("testRuntimeClasspath") {
    gradlegoo.prefers(getResolutionStrategy(), "logging", "jcl-api-capability", "jcl-over-slf4j", "jcl should prefer slf4j when available")
    gradlegoo.prefers(getResolutionStrategy(), "logging", "slf4j-impl-capability", "spf4j-slf4j-test", "tests use slf4j-test")
}

configurations.named("testCompileClasspath") {
    gradlegoo.prefers(getResolutionStrategy(), "logging", "jcl-api-capability", "jcl-over-slf4j", "jcl should prefer slf4j when available")
    gradlegoo.prefers(getResolutionStrategy(), "logging", "slf4j-impl-capability", "spf4j-slf4j-test", "tests use slf4j-test")
}

// Set the expected module Java level (can use a higher Java to run, but should not use features from a higher Java)
sourceCompatibility = 1.11
targetCompatibility = 1.11

javafx {
    version = "11.0.2"
    modules = [
            'javafx.graphics',
            'javafx.fxml',
            'javafx.web']
}

checkstyle {
    configFile = new File("$rootDir/config/metrics/checkstyle/checkstyle.xml")
    configProperties.samedir = checkstyle.configFile.parentFile
}

pmd {
    ignoreFailures = true
    ruleSetFiles = files("$rootDir/config/metrics/pmd/pmd.xml")
}

spotbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
}

mainClassName = 'org.terasology.launcher.TerasologyLauncher'

def convertGitBranch = { gitBranch ->
    if (gitBranch != null) {
        // Remove "origin/" from "origin/develop"
        gitBranch.substring(gitBranch.lastIndexOf("/") + 1)
    } else {
        ""
    }
}

task createVersionInfoFile {

    inputs.property('version', version.toString())

    File versionInfoFileDir = new File('src/main/resources', 'org/terasology/launcher/version')
    File versionInfoFile = new File(versionInfoFileDir, 'versionInfo.properties')

    outputs.file(versionInfoFile)

    doLast {
        versionInfoFileDir.mkdirs()
        ant.propertyfile(file: versionInfoFile) {
            ant.entry(key: 'buildNumber', value: env.BUILD_NUMBER)
            ant.entry(key: 'buildId', value: env.BUILD_ID)
            ant.entry(key: 'buildTag', value: env.BUILD_TAG)
            ant.entry(key: 'buildUrl', value: env.BUILD_URL)
            ant.entry(key: 'jobName', value: env.JOB_NAME)
            ant.entry(key: 'gitBranch', value: convertGitBranch(env.GIT_BRANCH))
            ant.entry(key: 'gitCommit', value: env.GIT_COMMIT)
            ant.entry(key: 'dateTime', value: startDateTimeString)
            ant.entry(key: 'version', value: version)
        }
    }
}

task extractCodeMetricsConfig(type: Copy) {
    description = "Extract code metrics configuration to '$metricsConfigDir'"
    from {
        configurations.codeMetrics.collect {
            zipTree(it)
        }
    }
    into "$rootDir/$metricsConfigDir"
}

clean {
    delete createVersionInfoFile.outputs.files
    delete extractCodeMetricsConfig.destinationDir
}

processResources.dependsOn(createVersionInfoFile, extractCodeMetricsConfig)

jar {
    //TODO we only use this name because the `.exe` start scripts require the JAR to be named 'TerasologyLauncher.jar'
    jar.archiveFileName = "${project.name}.jar"
    // replace development "logback.xml" with productive "logback_jar.xml"
    exclude "logback.xml"
    rename('logback_jar.xml', 'logback.xml')
    manifest {
        def manifestClasspath = configurations.runtimeClasspath.collect { it.getName() }.join(" ")
        attributes("Main-Class": mainClassName)
        attributes("Class-Path": manifestClasspath)
        attributes("Implementation-Title": project.name)
        attributes("Implementation-Version": project.version)
        attributes("SplashScreen-Image": splashImage)

        // allow everything
        attributes('Permissions': 'all-permissions')
        attributes('Codebase': '*')
        attributes('Application-Name': project.name)
        attributes('Application-Library-Allowable-Codebase': '*')
        attributes('Caller-Allowable-Codebase': '*')
        attributes('Trusted-Only': 'false')
    }
}

task copyExtra(type: Copy) {
    filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance("crlf"))

    from('README.md') {
        rename('README.md', 'README.txt')
    }

    from('CHANGELOG.md') {
        rename('CHANGELOG.md', 'CHANGELOG.txt')
    }

    from('CONTRIBUTING.md') {
        rename('CONTRIBUTING.md', 'CONTRIBUTING.txt')
    }

    from('LICENSE')
    from('NOTICE')

    into "$buildDir/distributions"
}

task copyExtraIntoResources(type: Copy) {
    from('README.md')
    from('CHANGELOG.md')
    from('docs/CONTRIBUTING.md')
    from('LICENSE')

    into('src/main/resources/org/terasology/launcher/about')
}
processResources.dependsOn copyExtraIntoResources

task copyIconsIntoResources(type: Copy) {
    from('icons')

    into('src/main/resources/org/terasology/launcher/icons')
}
processResources.dependsOn copyIconsIntoResources

//TODO: Temporary workaround for new exes / JRE bundling not quite being officially ready yet
distZip.exclude("*.x*.exe")
