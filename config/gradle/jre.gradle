/*
 * Copyright 2019 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Uses Bellsoft Liberica JRE
def jreVersion = '8u212'
def jreUrlBase = "https://download.bell-sw.com/java/${jreVersion}/bellsoft-jre${jreVersion}"
def jreUrlFilenames = [
        Linux64   : 'linux-amd64.tar.gz',
        Linux32   : 'linux-i586.tar.gz',
        Windows64 : 'windows-amd64.zip',
        Windows32 : 'windows-i586.zip',
        Mac       : 'macos-amd64.zip'
]

task createRelease() {
    group 'Distribution'
    description 'Bundles the project with a JRE for each platform'
    dependsOn distZip

    doLast {
        println 'Created release: ' + version
    }
}

task downloadJreAll {
    group 'JRE'
    description 'Downloads JREs for all platforms'
}

task unpackJreAll {
    group 'JRE'
    description 'Unpack JREs for all platforms'
}

def unpack(file) {
    copySpec {
        from((file.name.endsWith(".zip")) ? zipTree(file) : tarTree(file) ) {
           eachFile { fcd ->
                fcd.relativePath = new RelativePath(
                        true, fcd.relativePath.segments.drop(1))
            }
            includeEmptyDirs = false 
        }
    }
}

jreUrlFilenames.each { os, file ->

    def downloadTask = task "downloadJre${os}"(type: Download) {
        group 'JRE'
        description "Downloads JRE for $os"

        src "${jreUrlBase}-${file}"
        dest "${projectDir}/jre/${file}"
        overwrite false
    }

    def unpackTask = task "unpackJre${os}"(type: Copy) {
        group 'JRE'
        description "Unpack JRE for ${os} to distribution sources"
        dependsOn downloadTask

        with unpack(downloadTask.dest)
        into "${buildDir}/jre/${os}"
    }

    distributions {
        def distName = os.toLowerCase()
        def distBase = distName.replaceAll("\\d", "") // drop '32' or '64'

        "${distName}" {
            contents {
                with distributions.main.contents

                into('jre') {
                    from unpackTask
                }

                from("${projectDir}/buildres/${distBase}")
                from("${projectDir}/buildres/${distName}")
            }
        }
    }

    downloadJreAll.dependsOn downloadTask
    unpackJreAll.dependsOn unpackTask

    createRelease.dependsOn "assemble${os}Dist"
}

distributions {
    mac {
        contents {
            into 'TerasologyLauncher.app/Contents'
            exclude '**/*.bat'
            eachFile { details ->
                details.path = details.path.toString().replaceAll("(Contents)/bin/(.+)", "\$1/MacOS/\$2")
            }
        }
    }
}

/**
 * Patch start scripts to use bundled JRE. Patch files are located in 'buildres/scripts'.
 */
startScripts.doLast {
    ant.patch(
            originalfile: unixScript,
            patchfile: file("$projectDir/buildres/scripts/${file(unixScript).name}.patch")
    )

    ant.patch(
            originalfile: windowsScript,
            patchfile: file("$projectDir/buildres/scripts/${file(windowsScript).name}.patch")
    )
}
