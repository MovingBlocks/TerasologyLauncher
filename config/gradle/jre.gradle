// Copyright 2021 The Terasology Foundation
// SPDX-License-Identifier: Apache-2.0

// Uses Bellsoft Liberica JRE
// https://bell-sw.com/pages/liberica_install_guide-11.0.16.1/
def jdkVersion = '21.0.3+10'
def jreUrlFilenames = [
        Linux64   : 'linux-amd64-full.tar.gz',
        Windows64 : 'windows-amd64-full.zip',
        Mac       : 'macos-amd64-full.zip'
]

task createRelease() {
    group 'Distribution'
    description 'Bundles the project with a JRE for each platform'
    dependsOn distZip

    doLast {
        println 'Created release: ' + version
    }
}

task downloadJreAll {
    group 'JRE'
    description 'Downloads Launcher JREs for all platforms'
}

task unpackJreAll {
    group 'JRE'
    description 'Unpack JREs for all platforms'
}


def createJreTasks(String taskNameBase,
                   String downloadUrl,
                   String downloadFile,
                   String unpackDir) {

    task "download$taskNameBase"(type: Download) {
        group 'JRE'
        src downloadUrl
        dest downloadFile
        overwrite false
    }

    def unpackTask = task "unpack$taskNameBase"(type: Copy) {
        group 'JRE'
        from(downloadFile.endsWith("zip")
                ? zipTree(downloadFile)
                : tarTree(downloadFile)) {
            eachFile { fcd ->
                fcd.relativePath = new RelativePath(
                        true, fcd.relativePath.segments.drop(1))
            }
            includeEmptyDirs = false
        }
        into unpackDir

        dependsOn "download${taskNameBase}"
    }

    return unpackTask
}

jreUrlFilenames.each { os, file ->
    def launcherTaskBase = "Jre${os}"
    def unpackTask = createJreTasks(
            launcherTaskBase,
            "https://download.bell-sw.com/java/$jdkVersion/bellsoft-jre$jdkVersion-$file",
            "$projectDir/jre/$os-$jdkVersion-$file",
            "$projectDir/jre/$os")

    distributions {
        def distName = os.toLowerCase()
        def distBase = distName.replaceAll("\\d", "") // drop '32' or '64'

        "$distName" {
            contents {
                with distributions.main.contents

                into('jre') {
                    from unpackTask
                }

                from("${projectDir}/buildres/${distBase}")
                from("${projectDir}/buildres/${distName}")
            }
        }
    }

    downloadJreAll.dependsOn "download${launcherTaskBase}"
    unpackJreAll.dependsOn "unpack${launcherTaskBase}"

    createRelease.dependsOn "assemble${os}Dist"
}

distributions {
    mac {
        contents {
            into 'TerasologyLauncher.app/Contents'
            exclude '**/*.bat'
            eachFile { details ->
                details.path = details.path.toString().replaceAll("(Contents)/bin/(.+)", "\$1/MacOS/\$2")
            }
        }
    }
}

tasks.withType(CreateStartScripts) {
    def unixTemplate = file("$projectDir/buildres/scripts/unixStartScript.txt")
    def windowsTemplate = file("$projectDir/buildres/scripts/windowsStartScript.txt")

    assert project.file(unixTemplate).exists()
    assert project.file(windowsTemplate).exists()

    unixStartScriptGenerator.template = resources.text.fromFile(unixTemplate)
    windowsStartScriptGenerator.template = resources.text.fromFile(windowsTemplate)
}
